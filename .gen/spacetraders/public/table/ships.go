//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Ships = newShipsTable("public", "ships", "")

type shipsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	ArrivalAt    postgres.ColumnTimestampz
	DepartedAt   postgres.ColumnTimestampz
	Waypoint     postgres.ColumnString
	System       postgres.ColumnString
	Status       postgres.ColumnString
	Destination  postgres.ColumnString
	Origin       postgres.ColumnString
	MaxFuel      postgres.ColumnInteger
	CurrentFuel  postgres.ColumnInteger
	MaxCargo     postgres.ColumnInteger
	CurrentCargo postgres.ColumnInteger
	CargoFull    postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ShipsTable struct {
	shipsTable

	EXCLUDED shipsTable
}

// AS creates new ShipsTable with assigned alias
func (a ShipsTable) AS(alias string) *ShipsTable {
	return newShipsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ShipsTable with assigned schema name
func (a ShipsTable) FromSchema(schemaName string) *ShipsTable {
	return newShipsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ShipsTable with assigned table prefix
func (a ShipsTable) WithPrefix(prefix string) *ShipsTable {
	return newShipsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ShipsTable with assigned table suffix
func (a ShipsTable) WithSuffix(suffix string) *ShipsTable {
	return newShipsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newShipsTable(schemaName, tableName, alias string) *ShipsTable {
	return &ShipsTable{
		shipsTable: newShipsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newShipsTableImpl("", "excluded", ""),
	}
}

func newShipsTableImpl(schemaName, tableName, alias string) shipsTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		ArrivalAtColumn    = postgres.TimestampzColumn("arrival_at")
		DepartedAtColumn   = postgres.TimestampzColumn("departed_at")
		WaypointColumn     = postgres.StringColumn("waypoint")
		SystemColumn       = postgres.StringColumn("system")
		StatusColumn       = postgres.StringColumn("status")
		DestinationColumn  = postgres.StringColumn("destination")
		OriginColumn       = postgres.StringColumn("origin")
		MaxFuelColumn      = postgres.IntegerColumn("max_fuel")
		CurrentFuelColumn  = postgres.IntegerColumn("current_fuel")
		MaxCargoColumn     = postgres.IntegerColumn("max_cargo")
		CurrentCargoColumn = postgres.IntegerColumn("current_cargo")
		CargoFullColumn    = postgres.BoolColumn("cargo_full")
		allColumns         = postgres.ColumnList{IDColumn, ArrivalAtColumn, DepartedAtColumn, WaypointColumn, SystemColumn, StatusColumn, DestinationColumn, OriginColumn, MaxFuelColumn, CurrentFuelColumn, MaxCargoColumn, CurrentCargoColumn, CargoFullColumn}
		mutableColumns     = postgres.ColumnList{ArrivalAtColumn, DepartedAtColumn, WaypointColumn, SystemColumn, StatusColumn, DestinationColumn, OriginColumn, MaxFuelColumn, CurrentFuelColumn, MaxCargoColumn, CurrentCargoColumn, CargoFullColumn}
	)

	return shipsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		ArrivalAt:    ArrivalAtColumn,
		DepartedAt:   DepartedAtColumn,
		Waypoint:     WaypointColumn,
		System:       SystemColumn,
		Status:       StatusColumn,
		Destination:  DestinationColumn,
		Origin:       OriginColumn,
		MaxFuel:      MaxFuelColumn,
		CurrentFuel:  CurrentFuelColumn,
		MaxCargo:     MaxCargoColumn,
		CurrentCargo: CurrentCargoColumn,
		CargoFull:    CargoFullColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
