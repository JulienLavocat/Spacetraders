//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TradingFleets = newTradingFleetsTable("public", "trading_fleets", "")

type tradingFleetsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	SystemID  postgres.ColumnString
	StartTime postgres.ColumnTimestampz
	Revenue   postgres.ColumnInteger
	Expanses  postgres.ColumnInteger
	Ships     postgres.ColumnString
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TradingFleetsTable struct {
	tradingFleetsTable

	EXCLUDED tradingFleetsTable
}

// AS creates new TradingFleetsTable with assigned alias
func (a TradingFleetsTable) AS(alias string) *TradingFleetsTable {
	return newTradingFleetsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TradingFleetsTable with assigned schema name
func (a TradingFleetsTable) FromSchema(schemaName string) *TradingFleetsTable {
	return newTradingFleetsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TradingFleetsTable with assigned table prefix
func (a TradingFleetsTable) WithPrefix(prefix string) *TradingFleetsTable {
	return newTradingFleetsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TradingFleetsTable with assigned table suffix
func (a TradingFleetsTable) WithSuffix(suffix string) *TradingFleetsTable {
	return newTradingFleetsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTradingFleetsTable(schemaName, tableName, alias string) *TradingFleetsTable {
	return &TradingFleetsTable{
		tradingFleetsTable: newTradingFleetsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newTradingFleetsTableImpl("", "excluded", ""),
	}
}

func newTradingFleetsTableImpl(schemaName, tableName, alias string) tradingFleetsTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		SystemIDColumn  = postgres.StringColumn("system_id")
		StartTimeColumn = postgres.TimestampzColumn("start_time")
		RevenueColumn   = postgres.IntegerColumn("revenue")
		ExpansesColumn  = postgres.IntegerColumn("expanses")
		ShipsColumn     = postgres.StringColumn("ships")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, SystemIDColumn, StartTimeColumn, RevenueColumn, ExpansesColumn, ShipsColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{SystemIDColumn, StartTimeColumn, RevenueColumn, ExpansesColumn, ShipsColumn, UpdatedAtColumn}
	)

	return tradingFleetsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		SystemID:  SystemIDColumn,
		StartTime: StartTimeColumn,
		Revenue:   RevenueColumn,
		Expanses:  ExpansesColumn,
		Ships:     ShipsColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
