//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ShipsCargo = newShipsCargoTable("public", "ships_cargo", "")

type shipsCargoTable struct {
	postgres.Table

	// Columns
	ShipID  postgres.ColumnString
	Product postgres.ColumnString
	Amount  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ShipsCargoTable struct {
	shipsCargoTable

	EXCLUDED shipsCargoTable
}

// AS creates new ShipsCargoTable with assigned alias
func (a ShipsCargoTable) AS(alias string) *ShipsCargoTable {
	return newShipsCargoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ShipsCargoTable with assigned schema name
func (a ShipsCargoTable) FromSchema(schemaName string) *ShipsCargoTable {
	return newShipsCargoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ShipsCargoTable with assigned table prefix
func (a ShipsCargoTable) WithPrefix(prefix string) *ShipsCargoTable {
	return newShipsCargoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ShipsCargoTable with assigned table suffix
func (a ShipsCargoTable) WithSuffix(suffix string) *ShipsCargoTable {
	return newShipsCargoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newShipsCargoTable(schemaName, tableName, alias string) *ShipsCargoTable {
	return &ShipsCargoTable{
		shipsCargoTable: newShipsCargoTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newShipsCargoTableImpl("", "excluded", ""),
	}
}

func newShipsCargoTableImpl(schemaName, tableName, alias string) shipsCargoTable {
	var (
		ShipIDColumn   = postgres.StringColumn("ship_id")
		ProductColumn  = postgres.StringColumn("product")
		AmountColumn   = postgres.IntegerColumn("amount")
		allColumns     = postgres.ColumnList{ShipIDColumn, ProductColumn, AmountColumn}
		mutableColumns = postgres.ColumnList{ProductColumn, AmountColumn}
	)

	return shipsCargoTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ShipID:  ShipIDColumn,
		Product: ProductColumn,
		Amount:  AmountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
