//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Traits = newTraitsTable("public", "traits", "")

type traitsTable struct {
	postgres.Table

	// Columns
	ID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TraitsTable struct {
	traitsTable

	EXCLUDED traitsTable
}

// AS creates new TraitsTable with assigned alias
func (a TraitsTable) AS(alias string) *TraitsTable {
	return newTraitsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TraitsTable with assigned schema name
func (a TraitsTable) FromSchema(schemaName string) *TraitsTable {
	return newTraitsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TraitsTable with assigned table prefix
func (a TraitsTable) WithPrefix(prefix string) *TraitsTable {
	return newTraitsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TraitsTable with assigned table suffix
func (a TraitsTable) WithSuffix(suffix string) *TraitsTable {
	return newTraitsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTraitsTable(schemaName, tableName, alias string) *TraitsTable {
	return &TraitsTable{
		traitsTable: newTraitsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newTraitsTableImpl("", "excluded", ""),
	}
}

func newTraitsTableImpl(schemaName, tableName, alias string) traitsTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		allColumns     = postgres.ColumnList{IDColumn}
		mutableColumns = postgres.ColumnList{}
	)

	return traitsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID: IDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
