//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WaypointsModifiers = newWaypointsModifiersTable("public", "waypoints_modifiers", "")

type waypointsModifiersTable struct {
	postgres.Table

	// Columns
	ModifierID postgres.ColumnString
	WaypointID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WaypointsModifiersTable struct {
	waypointsModifiersTable

	EXCLUDED waypointsModifiersTable
}

// AS creates new WaypointsModifiersTable with assigned alias
func (a WaypointsModifiersTable) AS(alias string) *WaypointsModifiersTable {
	return newWaypointsModifiersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WaypointsModifiersTable with assigned schema name
func (a WaypointsModifiersTable) FromSchema(schemaName string) *WaypointsModifiersTable {
	return newWaypointsModifiersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WaypointsModifiersTable with assigned table prefix
func (a WaypointsModifiersTable) WithPrefix(prefix string) *WaypointsModifiersTable {
	return newWaypointsModifiersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WaypointsModifiersTable with assigned table suffix
func (a WaypointsModifiersTable) WithSuffix(suffix string) *WaypointsModifiersTable {
	return newWaypointsModifiersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWaypointsModifiersTable(schemaName, tableName, alias string) *WaypointsModifiersTable {
	return &WaypointsModifiersTable{
		waypointsModifiersTable: newWaypointsModifiersTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newWaypointsModifiersTableImpl("", "excluded", ""),
	}
}

func newWaypointsModifiersTableImpl(schemaName, tableName, alias string) waypointsModifiersTable {
	var (
		ModifierIDColumn = postgres.StringColumn("modifier_id")
		WaypointIDColumn = postgres.StringColumn("waypoint_id")
		allColumns       = postgres.ColumnList{ModifierIDColumn, WaypointIDColumn}
		mutableColumns   = postgres.ColumnList{}
	)

	return waypointsModifiersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ModifierID: ModifierIDColumn,
		WaypointID: WaypointIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
