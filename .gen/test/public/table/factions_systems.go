//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FactionsSystems = newFactionsSystemsTable("public", "factions_systems", "")

type factionsSystemsTable struct {
	postgres.Table

	// Columns
	FactionID postgres.ColumnString
	SystemID  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FactionsSystemsTable struct {
	factionsSystemsTable

	EXCLUDED factionsSystemsTable
}

// AS creates new FactionsSystemsTable with assigned alias
func (a FactionsSystemsTable) AS(alias string) *FactionsSystemsTable {
	return newFactionsSystemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FactionsSystemsTable with assigned schema name
func (a FactionsSystemsTable) FromSchema(schemaName string) *FactionsSystemsTable {
	return newFactionsSystemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FactionsSystemsTable with assigned table prefix
func (a FactionsSystemsTable) WithPrefix(prefix string) *FactionsSystemsTable {
	return newFactionsSystemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FactionsSystemsTable with assigned table suffix
func (a FactionsSystemsTable) WithSuffix(suffix string) *FactionsSystemsTable {
	return newFactionsSystemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFactionsSystemsTable(schemaName, tableName, alias string) *FactionsSystemsTable {
	return &FactionsSystemsTable{
		factionsSystemsTable: newFactionsSystemsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newFactionsSystemsTableImpl("", "excluded", ""),
	}
}

func newFactionsSystemsTableImpl(schemaName, tableName, alias string) factionsSystemsTable {
	var (
		FactionIDColumn = postgres.StringColumn("faction_id")
		SystemIDColumn  = postgres.StringColumn("system_id")
		allColumns      = postgres.ColumnList{FactionIDColumn, SystemIDColumn}
		mutableColumns  = postgres.ColumnList{}
	)

	return factionsSystemsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		FactionID: FactionIDColumn,
		SystemID:  SystemIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
