//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Transactions = newTransactionsTable("public", "transactions", "")

type transactionsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	Waypoint      postgres.ColumnString
	Product       postgres.ColumnString
	Amount        postgres.ColumnInteger
	Type          postgres.ColumnString
	Ship          postgres.ColumnString
	PricePerUnit  postgres.ColumnInteger
	TotalPrice    postgres.ColumnInteger
	Timestamp     postgres.ColumnTimestampz
	AgentBalance  postgres.ColumnInteger
	CorrelationID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TransactionsTable struct {
	transactionsTable

	EXCLUDED transactionsTable
}

// AS creates new TransactionsTable with assigned alias
func (a TransactionsTable) AS(alias string) *TransactionsTable {
	return newTransactionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionsTable with assigned schema name
func (a TransactionsTable) FromSchema(schemaName string) *TransactionsTable {
	return newTransactionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TransactionsTable with assigned table prefix
func (a TransactionsTable) WithPrefix(prefix string) *TransactionsTable {
	return newTransactionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TransactionsTable with assigned table suffix
func (a TransactionsTable) WithSuffix(suffix string) *TransactionsTable {
	return newTransactionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTransactionsTable(schemaName, tableName, alias string) *TransactionsTable {
	return &TransactionsTable{
		transactionsTable: newTransactionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newTransactionsTableImpl("", "excluded", ""),
	}
}

func newTransactionsTableImpl(schemaName, tableName, alias string) transactionsTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		WaypointColumn      = postgres.StringColumn("waypoint")
		ProductColumn       = postgres.StringColumn("product")
		AmountColumn        = postgres.IntegerColumn("amount")
		TypeColumn          = postgres.StringColumn("type")
		ShipColumn          = postgres.StringColumn("ship")
		PricePerUnitColumn  = postgres.IntegerColumn("price_per_unit")
		TotalPriceColumn    = postgres.IntegerColumn("total_price")
		TimestampColumn     = postgres.TimestampzColumn("timestamp")
		AgentBalanceColumn  = postgres.IntegerColumn("agent_balance")
		CorrelationIDColumn = postgres.StringColumn("correlation_id")
		allColumns          = postgres.ColumnList{IDColumn, WaypointColumn, ProductColumn, AmountColumn, TypeColumn, ShipColumn, PricePerUnitColumn, TotalPriceColumn, TimestampColumn, AgentBalanceColumn, CorrelationIDColumn}
		mutableColumns      = postgres.ColumnList{WaypointColumn, ProductColumn, AmountColumn, TypeColumn, ShipColumn, PricePerUnitColumn, TotalPriceColumn, TimestampColumn, AgentBalanceColumn, CorrelationIDColumn}
	)

	return transactionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Waypoint:      WaypointColumn,
		Product:       ProductColumn,
		Amount:        AmountColumn,
		Type:          TypeColumn,
		Ship:          ShipColumn,
		PricePerUnit:  PricePerUnitColumn,
		TotalPrice:    TotalPriceColumn,
		Timestamp:     TimestampColumn,
		AgentBalance:  AgentBalanceColumn,
		CorrelationID: CorrelationIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
