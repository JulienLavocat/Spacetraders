//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Systems = newSystemsTable("public", "systems", "")

type systemsTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnString
	SectorID postgres.ColumnString
	Type     postgres.ColumnString
	X        postgres.ColumnInteger
	Y        postgres.ColumnInteger
	Gid      postgres.ColumnInteger
	Geom     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SystemsTable struct {
	systemsTable

	EXCLUDED systemsTable
}

// AS creates new SystemsTable with assigned alias
func (a SystemsTable) AS(alias string) *SystemsTable {
	return newSystemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SystemsTable with assigned schema name
func (a SystemsTable) FromSchema(schemaName string) *SystemsTable {
	return newSystemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SystemsTable with assigned table prefix
func (a SystemsTable) WithPrefix(prefix string) *SystemsTable {
	return newSystemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SystemsTable with assigned table suffix
func (a SystemsTable) WithSuffix(suffix string) *SystemsTable {
	return newSystemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSystemsTable(schemaName, tableName, alias string) *SystemsTable {
	return &SystemsTable{
		systemsTable: newSystemsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newSystemsTableImpl("", "excluded", ""),
	}
}

func newSystemsTableImpl(schemaName, tableName, alias string) systemsTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		SectorIDColumn = postgres.StringColumn("sector_id")
		TypeColumn     = postgres.StringColumn("type")
		XColumn        = postgres.IntegerColumn("x")
		YColumn        = postgres.IntegerColumn("y")
		GidColumn      = postgres.IntegerColumn("gid")
		GeomColumn     = postgres.StringColumn("geom")
		allColumns     = postgres.ColumnList{IDColumn, SectorIDColumn, TypeColumn, XColumn, YColumn, GidColumn, GeomColumn}
		mutableColumns = postgres.ColumnList{SectorIDColumn, TypeColumn, XColumn, YColumn, GidColumn, GeomColumn}
	)

	return systemsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		SectorID: SectorIDColumn,
		Type:     TypeColumn,
		X:        XColumn,
		Y:        YColumn,
		Gid:      GidColumn,
		Geom:     GeomColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
